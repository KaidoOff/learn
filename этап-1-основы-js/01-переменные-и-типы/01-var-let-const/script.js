/* var, let, const */

console.log('Hello World!')

/* 

1. Старый способ объявления переменных (ES5 и раньше).
2. Область видимости: функция (function scope). Если объявлена вне функции → глобальная
3. Можно повторно объявлять одну и ту же переменную.
4. Подвержена hoisting — переменная «поднимается» вверх области видимости, но без значения до присвоения.

*/

var name = "Андрей";
console.log(name); // Андрей

var name = "Маша"; // можно переобъявить
console.log(name); // Маша

// ===================

/* 

1. Современный способ объявления переменных (ES6+).
2. Область видимости: блок (block scope) — внутри { }.
3. Можно изменять значение, но нельзя повторно объявлять в одной области видимости.
4. Нет hoisting в привычном виде (поднята, но недоступна до строки объявления).

*/

let age = 20;
age = 21; // можно изменить
console.log(age); // 21

// let age = 22; - ❌ ошибка! нельзя повторно объявить в той же области


// ===================

/* 

1. Объявляет константу (значение нельзя изменить после присвоения).
2. Область видимости: блок (block scope).
3. Нельзя переобъявлять или переназначать.
4. Если объект или массив — нельзя менять саму переменную, но можно менять содержимое объекта/массива.

*/

const year = 2025; // нельзя переназначить
console.log(year)

// создание обьекта

const data = {
    name: 'Andrey',
    age: 20
}

console.log(data); // { name: 'Andrey', age: 20 }
console.log(data.name); // Andrey

const score = [10, 20, 30]; // [ 10, 20, 30 ]

console.log(score)
console.log(score[1]) // 20


/* ======================== */ /* Задачки на освоения материала */ /* ======================== */

console.log('==================')

// Задача 1 — var vs let

function testScope() {
    var a = 10;
    let b = 20;

    if (true) {
        var a = 30; // что произойдет с a?
        let b = 40; // что произойдет с b?
        console.log(a); // 30
        console.log(b); // 40
    }

    console.log(a); // 10
    /* 
    я выбрал 10 - этот вариант не правильный 
    потому что var можно переобьявить в независимости от области
    т.е если он обявлен вне условия с одним значением, потом его переобьявить в другой области (например в функции или условии), после чего вызвать то будет показыватся новое значение
    */
    console.log(b); // 20
}

testScope();


// const и объекты

const person = {
    name: "Andrey",
    age: 20
};

// Можно ли сделать следующее? Что произойдет?
person.age = 21; // да, возраст изменится на 21
//person = { name: "Masha", age: 22 }; // ошибка, так как это константа таким образом ее нельзя перезаписать
console.log(person);

// массивы

const fruits = ["яблоко", "банан", "киви"];
console.log(fruits)

// Добавь в конец массива "апельсин"
fruits.push('апельсин')
console.log(fruits)

// Замени второй элемент на "груша"
fruits[1] = 'Груша'

// Выведи весь массив и второй элемент
console.log(fruits, fruits[1])